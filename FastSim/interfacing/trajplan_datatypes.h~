/*------------------------------------------------------------
    trajplan_datatypes.h   --   Trajectory Planner interface datatypes

    Copyright (c) 2013 by General Motors Corporation
    Developed by Michael A. Losh, under contract to General Motors Corporation
    Latest update: 2013.06.28


    data element suffix tags:
    _deg = degrees
    _dps = degrees per second
    _m   = meters
    _mps = meters per second
    _n   = index/number within a set
    _sec = seconds
------------------------------------------------------------*/

#ifndef __trajplan_datatypes
#define __trajplan_datatypes

enum {MAX_PATHLANE_POINTS = 500};
enum {MAX_TRAJPLAN_OBJECTS = 100};

typedef enum {
    CURRENT_LANE          = 0,
    LEFT_OF_CURRENT_LANE  = 1,
    RIGHT_OF_CURRENT_LANE = 2
} lane_placement_t;

typedef enum {
    DONT_CHANGE           = 0,
    DEPART_TO_LEFT        = 1,
    DEPART_TO_RIGHT       = 2,
    ARRIVE_FROM_LEFT      = 3,
    ARRIVE_FROM_RIGHT     = 4
} lane_change_plan_t;

typedef struct path_point_2d {
    double lat_deg;             // global absolute latitude, measured in degrees, including fractional degrees
    double lon_deg;             // ditto for longitude
    double nom_speed_mps;       // recommended speed at this point in the path (e.g. slower for a tight curve)
} path_point_2d_t;

typedef struct trajplan_pathlane {
    lane_placement_t    lane_placement;             // Which lane this is, current or the lane to left or right of current
    lane_change_plan_t  lane_change_plan;           // Whether to change and from/to which direction
    int                 point_count;                // Number of valid points in point[] array
    path_point_2d_t     point[MAX_PATHLANE_POINTS]; // array of 2D absolute latitude, longitude points, only the first point_count elements are valid
    double              speed_lim_mps;              // posted/advised overall speed limit
    double              width_m;                    // default width of lane associated with this segment, use unless points are populated with width
    int                 next_stop_point_n;          // If the path contains a planned stop, this point in array is closest to it
    int                 lane_change_start_n;        // If the path has a planned lane change, this point is closest to start of safe lane change zone
    int                 lane_change_end_n;          // Ditto for lane change zone end point
    double              ts_sec;                     // timestamp of the latest data update
} trajplan_pathlane_t;

// Planned path trajectory point, part of output from trajectory planner

typedef struct trajplan_trajectory {
    int                     point_count;                // Number of valid points in point[] array
    path_point_2d_t         point[MAX_PATHLANE_POINTS]; // array of 2D planned trajectory relative (X,Y) points,
                                                        //   only the first point_count elements are valid
    double                  ts_sec;                     // timestamp of the latest data update
} trajectory_t;

// Master state
typedef enum {
    STATE_OFF                    = 0,
    STATE_ENABLING_AUTONOMOUS    = 1,
    STATE_INITIALIZING           = 2,
    STATE_STANDBYn               = 3,
    STATE_SHUTTING_DOWN          = 4,
    STATE_DISABLING_AUTONOMOUS   = 5,
    STATE_IDLE                   = 6,
    STATE_PREPARING_TO_DRIVE     = 7,
    STATE_UNUSED_1,
    STATE_UNUSED_2,
    STATE_UNUSED_3,
    STATE_AUTONOMOUS_DRIVING     = 11,
    STATE_EMERGENCY_STOPPING     = 12,
    STATE_MANUAL_DRIVING         = 13
} core_master_state_t;


typedef struct core_host_state {
    core_master_state_t     master_state_enum;      // 11 = autonomous, 13 = manual, other = not ready (off, idle, or in-transition)
    int                     heading_trusted;        // 1 = yaw heading estimate is trustworthy, 0 = not (yet)
    double                  velocity_mps;           // fore/aft speed m/s (scalar)
    double                  lat_deg;                // best estimate of current center latitude in decimal degrees
    double                  lon_deg;                // best estimate of current center longitude in decimal degrees
    double                  yaw_angle_deg;          // best estimate of vehicle heading orientation (yaw 0 = facing East, 90.0 = facing North, -90.0 = facing south)

    double                  lat_accel_mpss;         // magnitude of lateral acceleration (scalar) -- vehicle coordinate sys (pos for leftward turning)
    double                  lon_accel_mpss;         // magnitude of longitudinal acceleration (scalar)
    double                  yawrate_dps;            // yaw rate deg/s (scalar)
    double                  road_wheel_angle_deg;   // current (averaged) angle of front wheels relative to vehicle body, pos for a left-turn angle, neg for right
    double                  ts_sec;                 // timestamp of latest data update
} core_host_state_t;

typedef enum {
    OBJTYPE_UNKNOWN         = 0,
    OBJTYPE_VEHICLE         = 1,
    OBJTYPE_TRUCK           = 2,
    OBJTYPE_PEDESTRIAN      = 3,
    OBJTYPE_MOTORCYCLE      = 4,
    OBJTYPE_BICYCLE         = 5,
    OBJTYPE_STATIONARY      = 6
} trajplan_objtype_t;

// NOTE: trajplan_object location is defined in a coordinate system
// fixed at the host vehicle's center point and oriented with the
// the positive X axis in the host vehicle's forward direction,
// and the positive Y axis pointing leftward from the host vehicle

typedef struct trajplan_object {
    long long int           id;             // 64-bit identification number
    trajplan_objtype_t      type;           // object classification type
    double                  ts_sec;         // timestamp for when the latest update data arrived
    double                  rel_x_m;        // how far ahead(pos) or behind(neg) the object is compared to the host vehicle
    double                  rel_y_m;        // how far to the left(pos) or right(neg) the object is from the host vehicle's centerline
    double                  rel_phi_deg;    // how far counter-clockwise(pos) or clockwise(neg) the object seems to be rotated compared to the host vehicle,
                                            //   0.0 = external object facing same direction as host
                                            //  90.0 = external object facing to host's left
                                            // 180.0 = exteral object facing host (opposing direction)
    double                  length_m;       // length of bounding box, along direction of travel for moving objects
    double                  width_m;        // width of bounding box, perpendicular to direction of travel for moving objects

    double                  speed_mps;      // ground speed  in meters per second in the object's own frame of reference
} trajplan_object_t;

// Socket message types
enum {HOSTSTATE_UPDATE_MSGTYPE=1, CENTERLANE_UPDATE_MSGTYPE=2,
      LEFTLANE_UPDATE_MSGTYPE=3, RIGHTLANE_UPDATE_MSGTYPE=4,
      OBJLIST_UPDATE_MSGTYPE=5,  UPDATE_ACK_MSGTYPE=6,

      TRAJPLAN_REQUEST_MSGTYPE = 7,
      TRAJPLAN_RESULT_MSGTYPE=8, TRAJPLAN_UNREADY_MSGTYPE=9,

      CLIENT_BYE_MSGTYPE=10, BAD_REQUEST_MSGTYPE=11,
      LAST_MSGTYPE=12, UNKNOWN_MSGTYPE=0
};

#endif
